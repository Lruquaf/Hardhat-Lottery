{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/IPriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface IPriceConverter {\r\n    function getConversionRate(uint256 ETHAmount) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/IRandomNumberGenerator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface IRandomNumberGenerator {\r\n    function getRandomNumber(uint256 _requestId) external view returns (uint256);\r\n\r\n    function requestRandomWords() external returns (uint256);\r\n}\r\n"
    },
    "contracts/Lottery.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./IPriceConverter.sol\";\r\nimport \"./IRandomNumberGenerator.sol\";\r\n\r\nerror Lottery__NotEntranceFee();\r\nerror Lottery__RandomNumberNotExists();\r\nerror Lottery__TransferFailed();\r\nerror Lottery__NotRightTime();\r\nerror Lottery__Closed();\r\nerror Lottery__Open();\r\nerror Lottery__NotEnoughParticipant();\r\n\r\ncontract Lottery is Ownable {\r\n    uint256 private immutable entranceFee;\r\n    uint256 private immutable interval;\r\n    uint256 private latestCheckpoint;\r\n    uint256 private playerCounter;\r\n    uint256 private requestId;\r\n    address payable private recentWinner;\r\n    bool private isOpen = true;\r\n\r\n    mapping(uint256 => address payable) private players;\r\n\r\n    IPriceConverter public priceConverter;\r\n    IRandomNumberGenerator public randomNumberGenerator;\r\n\r\n    event LotteryEntered(address indexed player);\r\n    event WinnerRequested(uint256 indexed requestId);\r\n    event WinnerPicked(address indexed recentWinner);\r\n\r\n    constructor(\r\n        uint256 _entranceFee,\r\n        uint256 _interval,\r\n        address _randomNumberGenerator,\r\n        address _priceConverter\r\n    ) {\r\n        entranceFee = _entranceFee;\r\n        interval = _interval;\r\n        randomNumberGenerator = IRandomNumberGenerator(_randomNumberGenerator);\r\n        priceConverter = IPriceConverter(_priceConverter);\r\n        latestCheckpoint = block.timestamp;\r\n    }\r\n\r\n    function enterLottery() public payable {\r\n        if (!isOpen) {\r\n            revert Lottery__Closed();\r\n        }\r\n        if (\r\n            (priceConverter.getConversionRate(msg.value) >= ((entranceFee * 95) / 100)) &&\r\n            (priceConverter.getConversionRate(msg.value) <= ((entranceFee * 105) / 100))\r\n        ) {\r\n            revert Lottery__NotEntranceFee();\r\n        }\r\n        players[playerCounter] = payable(msg.sender);\r\n        playerCounter++;\r\n        emit LotteryEntered(msg.sender);\r\n    }\r\n\r\n    function requestRandomWinner() public {\r\n        if (!isOpen) {\r\n            revert Lottery__Closed();\r\n        }\r\n        if (playerCounter < 2) {\r\n            revert Lottery__NotEnoughParticipant();\r\n        }\r\n        if (block.timestamp - latestCheckpoint < interval * 10) {\r\n            revert Lottery__NotRightTime();\r\n        }\r\n        isOpen = false;\r\n        latestCheckpoint = block.timestamp;\r\n        requestId = randomNumberGenerator.requestRandomWords();\r\n        emit WinnerRequested(requestId);\r\n    }\r\n\r\n    function pickRandomWinner() public {\r\n        if (isOpen) {\r\n            revert Lottery__Open();\r\n        }\r\n        if (getRandomNumber() == 0) {\r\n            revert Lottery__RandomNumberNotExists();\r\n        }\r\n        if (block.timestamp - latestCheckpoint < interval) {\r\n            revert Lottery__NotRightTime();\r\n        }\r\n        uint256 randomNumber = getRandomNumber();\r\n        uint256 playerId = randomNumber % (playerCounter - 1);\r\n        recentWinner = players[playerId];\r\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\"\");\r\n        if (!success) {\r\n            revert Lottery__TransferFailed();\r\n        }\r\n        latestCheckpoint = block.timestamp;\r\n        for (uint i = 0; i < playerCounter; i++) {\r\n            delete players[playerId];\r\n        }\r\n        playerCounter = 0;\r\n        isOpen = true;\r\n        emit WinnerPicked(recentWinner);\r\n    }\r\n\r\n    function getRandomNumber() public view returns (uint256) {\r\n        return randomNumberGenerator.getRandomNumber(requestId);\r\n    }\r\n\r\n    function getRequestId() public view returns (uint256) {\r\n        return requestId;\r\n    }\r\n\r\n    function getEntranceFee() public view returns (uint256) {\r\n        return entranceFee;\r\n    }\r\n\r\n    function getInterval() public view returns (uint256) {\r\n        return interval;\r\n    }\r\n\r\n    function getLatestCheckpoint() public view returns (uint256) {\r\n        return latestCheckpoint;\r\n    }\r\n\r\n    function getRecentWinner() public view returns (address) {\r\n        return recentWinner;\r\n    }\r\n\r\n    function getPlayerCounter() public view returns (uint256) {\r\n        return playerCounter;\r\n    }\r\n\r\n    function getPlayer(uint256 _id) public view returns (address) {\r\n        return players[_id];\r\n    }\r\n\r\n    function getState() public view returns (bool) {\r\n        return isOpen;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}